dir.create(file.path('testdir2', 'testdir3') recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
setwd()
setwd(dir = old.dir)
unlink("testdir", recursive = TRUE)
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h =12)
hist(ppm, col = "green")
rug(ppm)
high
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd = 2)
abline(v=median(ppm), col= "magenta", lwd=4)
head(pollution)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25-region)
boxplot(pm25-region, data= pollution, col = "red")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region== "east")
head(east)
ist(east$pm25, col = "green")
hist(east$pm25, col = "green")
hist(subset(pollution,region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region=="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
xyplot(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data +mpg)
qplot(displ, hwy, data =mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par('fg')
par("pch")
par("lty")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
may <- subset(airquality, Month==5)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
read.csv(activity)
read.csv(activity.csv)
read.csv("activity)
read.csv("activity.csv")
data_row <- read.csv("activity.csv")
data_row <- read.csv('activity.csv')
data <- data_row[ with (data_row, { !(is.na(steps)) } ), ]
head(data,20)
setwd(dir = RepData_PeerAssessment1)
setwd(dir = 'RepData_PeerAssessment1')
wd
ls
ls()
dir
getwd()
dir
getwd()
data1 <- read.csv('activity.csv')
setwd(dir = "C:/Users/Rodrigo/Documents/")
getwd()
data1 <- read.csv('activity.csv')
data <- data1[ with (data1, { !(is.na(steps)) } ), ]
per_day <- group_by(data, date)
per_day <- group(data, date)
library(knitr)
library(dplyr)
library(ggplot2)
opts_chunk$set(echo = TRUE)
per_day <- group(data, date)
per_day <- group_by(data, date)
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
datasteps <- data[complete.cases(data),]
total_steps_per_day <- tapply(data_n$steps, data_n$date, sum, na.rm = TRUE)
total_steps_per_day <- tapply(data$steps, data$date, sum, na.rm = TRUE)
total_steps_per_day
hist(tot_step_day, col="blue", xlab = "Steps per Day", main = "Number of Steps per Day")
hist(total_steps_per_day, col="blue", xlab = "Steps per Day", main = "Number of Steps per Day")
mean_total <- mean(total_steps_per_day)
mean_total
median_total <- median(total_steps_per_day)
median_total
data_pattern <- data[complete.cases(data),]
daily_activity <- tapply(data_pattern$steps, data_pattern$interval, mean, na.rm = TRUE)
daily_activity
plot(names(daily_activity), daily_activity, type = "l", xlab = "Interval", ylab = "Average Number of Steps Taken Througout the Days", main = "Average Daily Activity", col = "red")
largest_n_steps_interval <- which.max(daily_activity)
names(largest_n_steps_interval)
number_na <- sum(!(complete.cases(data)))
number_na
new_data_filling_NA <- data
for (i in 1:nrow(new_data_filling_NA)){
if (is.na(new_data_filling_NA$steps[i])){
data_new$steps[i] <- mean(new_data_filling_NA$steps[new_data_filling_NA$interval == new_data_filling_NA$interval[i]], na.rm=TRUE)
}
}
new_data_filling_NA <- data
for (i in 1:nrow(new_data_filling_NA)){
if (is.na(new_data_filling_NA$steps[i])){
new_data_filling_NA$steps[i] <- mean(new_data_filling_NA$steps[new_data_filling_NA$interval == new_data_filling_NA$interval[i]], na.rm=TRUE)
}
}
total_steps_per_day2 <- tapply(new_data_filling_NA$steps, new_data_filling_NA$date, sum)
total_steps_per_day2
hist(total_steps_per_day2, col = "blue",xlab = "Steps taken per Day", main = "Average number of Steps per Day\n With Filled in Missing Values")
mean_total <- mean(total_steps_per_day)
mean_total <- mean(total_steps_per_day2)
mean_total
median_total <- median(total_steps_per_day2)
median_total
mean_total2 - mean_total
mean_total <- mean(total_steps_per_day)
median_total <- median(total_steps_per_day)
median_total2 <- median(total_steps_per_day2)
mean_total2 <- mean(total_steps_per_day2)
mean_total2 - mean_total
mean_total
mean_total2
mean_total2 - mean_total
mean_total2 - mean_total
median_total2 - median_total
w <- weekdays(strptime(data_new$date, format = "%Y-%m-%d"))
for (i in 1:length(w)){
if (w[i] == "Saturday" | w[i] == "Sunday"){
w[i] <- "weekend"
}
else {
w[i] <- "weekday"
}
}
w <- as.factor(w)
data_new$w <- w
week <- weekdays(strptime(new_data_filling_NA$date, format = "%Y-%m-%d"))
for (i in 1:length(week)){
if (week[i] == "Saturday" | week[i] == "Sunday"){
week[i] <- "weekend"
}
else {
week[i] <- "weekday"
}
}
week <- as.factor(week)
new_data_filling_NA$week <- week
final_data <- aggregate(steps ~ interval + week, data = new_data_filling_NA, mean)
library(lattice)
xyplot(steps ~ interval | week, data = final_data, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of Steps")
function(stateChr, outcomeChr, rankObj) {
source('~/rankhospital.r')
function(stateChr, outcomeChr, rankObj) {
function(stateChr, outcomeChr, rankObj) {
# --- Init loading outcome data
## Loading and preprocessing the data
View(new_data_filling_NA)
w <- weekdays(strptime(new_data_filling_NA$date, format = "%Y-%m-%d"))
final_data <- aggregate(steps ~ interval + w, data = new_data_filling_NA, mean)
w <- weekdays(strptime(new_data_filling_NA$date, format = "%Y-%m-%d"))
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
head(data)
datasteps <- data[complete.cases(data),]
datasteps <- data[complete.cases(data),]
total_steps_per_day <- tapply(data$steps, data$date, sum, na.rm = TRUE)
hist(total_steps_per_day, col="red", xlab = "Steps per Day", main = "Number of Steps per Day")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
head(data)
getwd
getwd()
hist(total_steps_per_day, col="red", xlab = "Steps per Day", main = "Number of Steps per Day")
hist(total_steps_per_day, col="red", xlab = "Steps per Day", main = "Number of Steps per Day")
```{r}
# 1. Calculate the total number of steps taken per day
getwd()
knit_with_parameters('~/RepData_PeerAssessment1/PA1_template.Rmd')
disp
disp <-hist(total_steps_per_day, col="red", xlab = "Steps per Day", main = "Number of Steps per Day")
total_steps_per_day <- tapply(datasteps$steps, datasteps$date, sum, na.rm = TRUE)
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
head(data)
datasteps <- data[complete.cases(data),]
total_steps_per_day <- tapply(datasteps$steps, datasteps$date, sum, na.rm = TRUE)
total_steps_per_day <- tapply(datasteps$steps, datasteps$date, sum, na.rm = TRUE)
output:
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
1/52
4/52
52
4/52
4/52
1/52
info()
skip()
9/52
12/52
2/51
(y*x)/2
skip()
64%
.64
mypdf
integrate(mypdf)
integrate(mypdf(x))
?integrate
integrate(function(x){x/2})
integrate(function(x){x/2}, 0 , 1.6)
integrate(mypdf, 0 , 1.6)
.8^2/4
skip()
.997*.001
(1-.985)*(1-.001)
.000997/(.000997+.014985)
.5
3.5
expect_dice()
expect_dice
dice_high
expect_dice(dice_high)
3.5
expect_dice(dice_low)
3.5
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
install.packages("UsingR")
week <- weekdays(strptime(new_data_filling_NA$date, format = "%Y-%m-%d"))
# 4.Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the
# estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: yes
---
## Loading and preprocessing the data
# 1. Load the data (i.e. read.csv())
xyplot(steps ~ interval | week, data = final_data, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of Steps")
week <- weekdays(strptime(new_data_filling_NA$date, format = "%Y-%m-%d"))
for (i in 1:length(week))
{
if (week[i] == "Saturday" | week[i] == "Sunday"){
week[i] <- "weekend"
}
else {
week[i] <- "weekday"
}
}
week <- weekdays(strptime(new_data_filling_NA$date, format = "%Y-%m-%d"))
for (i in 1:length(week))
{
if (week[i] == "Saturday" | week[i] == "Sunday"){
week[i] <- "weekend"
}
else {
week[i] <- "weekday"
}
}
week <- as.factor(week)
new_data_filling_NA$week <- week
w <- weekdays(strptime(data_new$date, format = "%Y-%m-%d"))
for (i in 1:length(w)){
if (w[i] == "Saturday" | w[i] == "Sunday"){
w[i] <- "weekend"
}
else {
w[i] <- "weekday"
}
}
w <- as.factor(w)
data_new$w <- w
library(lattice)
xyplot(steps ~ interval | week, data = final_data, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of Steps")
data <- read.csv("activity.csv", sep=",", header = TRUE, stringsAsFactors = FALSE, na.strings = "NA")
head(data)
View(data)
View(data)
head(data, 40)
datasteps <- data[complete.cases(data),]
total_steps_per_day <- tapply(datasteps$steps, datasteps$date, sum, na.rm = TRUE)
total_steps_per_day
hist(total_steps_per_day, col="red", xlab = "Steps per Day", main = "Number of Steps per Day")
mean_total <- mean(total_steps_per_day)
mean_total
median_total <- median(total_steps_per_day)
median_total
data_pattern <- data[complete.cases(data),]
daily_activity <- tapply(data_pattern$steps, data_pattern$interval, mean, na.rm = TRUE)
daily_activity
plot(names(daily_activity), daily_activity, type = "l", xlab = "Interval", ylab = "Average Number of Steps Taken Througout the Days", main = "Average Daily Activity", col = "red")
largest_n_steps_interval <- which.max(daily_activity)
names(largest_n_steps_interval)
number_na <- sum(!(complete.cases(data)))
number_na
new_data_filling_NA <- data
for (i in 1:nrow(new_data_filling_NA)){
if (is.na(new_data_filling_NA$steps[i])){
new_data_filling_NA$steps[i] <- mean(new_data_filling_NA$steps[new_data_filling_NA$interval == new_data_filling_NA$interval[i]], na.rm=TRUE)
}
}
total_steps_per_day2 <- tapply(new_data_filling_NA$steps, new_data_filling_NA$date, sum)
hist(total_steps_per_day2, col = "blue",xlab = "Steps taken per Day", main = "Average number of Steps per Day\n With Filled in Missing Values")
mean_total2 <- mean(total_steps_per_day2)
mean_total2
median_total2 <- median(total_steps_per_day2)
median_total2
mean_total2 - mean_total
median_total2 - median_total
week <- weekdays(strptime(new_data_filling_NA$date, format = "%Y-%m-%d"))
for (i in 1:length(week))
{
if (week[i] == "Saturday" | week[i] == "Sunday"){
week[i] <- "weekend"
}
else {
week[i] <- "weekday"
}
}
week <- as.factor(week)
new_data_filling_NA$week <- week
final_data <- aggregate(steps ~ interval + week, data = new_data_filling_NA, mean)
library(lattice)
xyplot(steps ~ interval | week, data = final_data, type = "l", layout = c(1, 2), xlab = "Interval", ylab = "Number of Steps")
knit_with_parameters('~/RepData_PeerAssessment1/PA1_template.Rmd')
knit_with_parameters('~/RepData_PeerAssessment1/PA1_template.Rmd')
install.packages(c("knitr", "rmarkdown"))
install.packages(c("knitr", "rmarkdown"))
knit_with_parameters('~/RepData_PeerAssessment1/PA1_template.Rmd')
knit_with_parameters('~/RepData_PeerAssessment1/PA1_template.Rmd')
plot3
View(plot3)
plot1 <- hist(total_steps_per_day, col="red", xlab = "Steps per Day", main = "Number of Steps per Day")
plot1
knit_with_parameters('~/RepData_PeerAssessment1/PA1_template.Rmd')
knit2html()
knit()
knitr()
knit2html(PA1_template.Rmd)
?knit2html
library(knitr)
knit2html(PA1_template.Rmd)
?knit2html
knit2html("PA1_template.Rmd", output = NULL, quiet = FALSE, force_v1 = FALSE)
source('~/GitHub/ExData_Plotting1/plot1.R')
data <- read.csv("household_power_consumption.txt", sep=";", dec = ".", header = TRUE, stringsAsFactors = FALSE, na.strings = "?")
source('~/.active-rstudio-document')
data <- read.csv("household_power_consumption.txt", sep=";", dec = ".", header = TRUE, stringsAsFactors = FALSE, na.strings = "?")
View(data)
source('~/GitHub/ExData_Plotting1/plot1.R')
library("knitr")
opts_chunk$set(echo = TRUE, results = 'hold')
library("xtable")
library("ggplot2")
unzip("exdata_data_household_power_consumption.zip")
data <- read.csv("household_power_consumption.txt", sep=";", dec = ".", header = TRUE, stringsAsFactors = FALSE, na.strings = "?")
dim(data)
summary(data)
source('~/GitHub/ExData_Plotting1/plot1.R')
geom_line(aes(datetime,metering3, colour = "Sub3")) +
geom_line(aes(datetime,metering3, colour = "Sub3")) +
ylab("Consumption (Watt per hour)")
source('~/.active-rstudio-document')
subSetData <- subset(data, (data$Date == "1/2/2007" | data$Date== "2/2/2007"))
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
subSetData$Sub_metering_3 <- as.numeric(as.character(subSetData$Sub_metering_3))
View(Sub_metering_1)
subSetData <- transform(subSetData, timestamp=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:%M:%S")
opts_chunk$set(echo = TRUE, results = 'hold')
opts_chunk$set(echo = TRUE, results = 'hold')
library("xtable")
library("ggplot2")
unzip("exdata_data_household_power_consumption.zip")
rawdata <- read.csv("household_power_consumption.txt", sep=";", header = TRUE, stringsAsFactors = FALSE, na.strings = "?")
dim(rawdata)
summary(rawdata)
rawdata$Date <- as.Date(rawdata$Date, format="%d/%m/%Y")
subSetData <- rawdata[(rawdata$Date=="2007-02-01") | (rawdata$Date=="2007-02-02"),]
subSetData$Global_active_power <- as.numeric(as.character(subSetData$Global_active_power))
subSetData$Global_reactive_power <- as.numeric(as.character(subSetData$Global_reactive_power))
subSetData$Voltage <- as.numeric(as.character(subSetData$Voltage))
subSetData <- transform(subSetData, timestamp=as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:%M:%S")
subSetData$Sub_metering_1 <- as.numeric(as.character(subSetData$Sub_metering_1))
subSetData$Sub_metering_2 <- as.numeric(as.character(subSetData$Sub_metering_2))
subSetData$Sub_metering_3 <- as.numeric(as.character(subSetData$Sub_metering_3))
plot1()
plot1()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
setwd("/Users/Rodrigo/Documents/GitHub/ExData_Plotting1")
getwd()
source('~/GitHub/ExData_Plotting1/plot1.R')
plot(subSetData$timestamp,subSetData$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
lines(subSetData$timestamp, subSetData$Sub_metering_3, col = "blue")
width = 480,
height = 480)
height = 480)
file = "plot3.png", width = 480,height = 480)
file = "plot3.png", width = 480,height = 480)
plot3 <- function() {
plot(
plot(
source('~/GitHub/ExData_Plotting1/plot3.R')
source('~/GitHub/ExData_Plotting1/plot3.R')
plot3 <- function() {
plot(
subSetData$timestamp,
subSetData$Sub_metering_1,
type = "l",
xlab = "",
ylab = "Energy sub metering"
)
lines(subSetData$timestamp, subSetData$Sub_metering_2, col = "red")
lines(subSetData$timestamp, subSetData$Sub_metering_3, col = "blue")
legend(
"topright",
col = c("black", "red", "blue"),
c("Sub_metering_1  ", "Sub_metering_2  ", "Sub_metering_3  "),
lty = c(1, 1),
lwd = c(1, 1)
)
dev.copy(png, file = "plot3.png", width = 480,height = 480)
dev.off()
cat("plot3.png has been saved in", getwd())
}
plot3()
source('~/GitHub/ExData_Plotting1/plot2.R')
source('~/GitHub/ExData_Plotting1/plot1.R')
source('~/GitHub/ExData_Plotting1/plot4.R')
cat("plot4.png has been saved in", getwd())
